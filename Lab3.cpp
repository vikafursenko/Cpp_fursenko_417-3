#include <iostream>
#include <locale.h>
#include <iomanip>
#include <bitset>

int main()
{
	setlocale(LC_ALL, "Russian");
	
	int *ptr_int;
	// std::cout << ptr_int << std::endl; так делать нельз€, нельз€ распечатать неинициализированную переменную 
	// std::cout << *ptr_int << std::endl; так делать нельз€, нельз€ распечатать неинициализированную переменную 
	std::cout << std::endl << "sizeof(ptr_int) = " << sizeof(ptr_int) << std::endl;

	int a = 10; 
	ptr_int = &a;

	std::cout << "значение адреса переменной a = " << &a << std::endl; 
	std::cout << "значение ptr_int = " << ptr_int << std::endl;
	std::cout << "значение *ptr_int = " << *ptr_int << std::endl << std::endl;
	


 // є 1
	int array_of_int[5];
	for (int i = 0; i < 4; i++) 
	{
		std::cout << array_of_int[i] << std::endl;
	}


 // є 2
	int c = 5;
	// int array_of_int[c]; - так делать нельз€, длину массива нельз€ задавать переменной


 // є 3
	int array_of_int2[3][3] = { {1,2,3},{4,5,6},{7,8,9} };
	for (int i = 0; i < ; i++ )




// —ейчас помимо просто хранени€ версий git используетс€ дл€ командной работы над одной и той же кодовой базов, 
// дл€ хранени€ резервной копии, дл€ публикации открытого кода и тд.

// ‘айлы проекта сместе со служебными файлами git называютс€ репозиторием, если репозиторий размещен на локальной машине
// - он называетс€ локальным, если репозиторий размещен в сети, то он называетс€ удаленным.
// —начала создаетс€ локальный репозиторий, с ним проводитс€ работа по добавлению файлов, фиксированию версий
// созданию и сли€нию веток. «атем результаты можно отправить (синхронизировать) с удаленным репозиторием

// 1. чтобы завести репозиторий в каталоге необходимо: открыть косоль в корневом каталоге проета: 
// 1 способ: зашать shift и нажать правой кнопкой мыши, выбрать пункт "открыть окно команд"
// 2 способ: открыть консоль в нужной папке, ввести git init, в адресной строке проводника ввести cmd 
// —оздан пустой репозиторий, ни один файл не отслеживаетс€, и версии не могут быть созданны, необходимо добавить файлы в список отслежевани€ git
// дл€ этого необходимо ввести команды git add *.cpp (маска под определенные расширени€) 


	std::system("pause"); // вызов функции system() из стандартной библиотеки
	return 0;
}
